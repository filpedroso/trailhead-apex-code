@isTest
private class AnimalsCalloutsTest {
    @isTest static  void testGetCallout() {
        // create a mock response
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        mock.setStaticResource('GetAnimalResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        // call method to test
        HttpResponse result = AnimalsCallouts.makeGetCallout();
        
        // asserts mock response is not null, its status code and type
        Assert.areNotEqual(null,result, 'The callout returned a null response.');      
        Assert.areEqual(200,result.getStatusCode(), 'The status code is not 200.');       
        Assert.areEqual('application/json;charset=UTF-8',
          result.getHeader('Content-Type'),
          'The content type value is not expected.');
        
        // verify the array contains 3 items
        Map<String, Object> results = (Map<String, Object>)
            JSON.deserializeUntyped(result.getBody());
        List<Object> animals = (List<Object>) results.get('animals');
        Assert.areEqual(3, animals.size(), 'The array should only contain 3 items.');
    }
}